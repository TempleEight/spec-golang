openapi: 3.0.0
info:
  version: 0.2.0
  title: Golang sample project
  description: The API for accessing the Golang sample project as generated by Temple
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register and get an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  format: email
                Password:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 64
              required:
                - Email
                - Password
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  AccessToken:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login and get an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  format: email
                Password:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 64
              required:
                - Email
                - Password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  AccessToken:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  minLength: 2
                  maxLength: 255
              required:
                - Name
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string 
                    format: uuid
                  Name:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /user/{id}:
    parameters:
      - in: path
        name: id
        description: ID of the user to perform operations on
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - User
      summary: Read a single user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User successfully read
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string
                    format: uuid
                  Name:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      tags:
        - User
      summary: Update a single user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  minLength: 2
                  maxLength: 255
              required:
                - Name
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string
                    format: uuid
                  Name:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - User
      summary: Delete a single user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /match/all:
    get:
      tags:
        - Match
      summary: Read the match list corresponding to the JWT ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Match list successfully read
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uuid
                    UserOne:
                      type: string
                      format: uuid
                    UserTwo:
                      type: string
                      format: uuid
                    MatchedOn:
                      type: string
                      format: date-time
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /match:
    post:
      tags:
        - Match
      summary: Create a new match
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserOne:
                  type: string
                  format: uuid
                UserTwo:
                  type: string
                  format: uuid
              required:
                - UserOne
                - UserTwo
      responses:
        '200':
          description: Match successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string
                    format: uuid
                  UserOne:
                    type: string
                    format: uuid
                  UserTwo:
                    type: string
                    format: uuid
                  MatchedOn:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /match/{id}:
    parameters:
      - in: path
        name: id
        description: ID of the match to perform operations on
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - Match
      summary: Read a single match
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Match successfully read
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string
                    format: uuid
                  UserOne:
                    type: string
                    format: uuid
                  UserTwo:
                    type: string
                    format: uuid
                  MatchedOn:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      tags:
        - Match
      summary: Update a single match
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserOne:
                  type: string
                  format: uuid
                UserTwo:
                  type: string
                  format: uuid
              required:
                - UserOne
                - UserTwo
      responses:
        '200':
          description: Match successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string
                    format: uuid
                  UserOne:
                    type: string
                    format: uuid
                  UserTwo:
                    type: string
                    format: uuid
                  MatchedOn:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Match
      summary: Delete a single match
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Match successfully deleted
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    400BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request parameters: name"
    401Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid email or password"
    403Forbidden:
      description: Valid request but server will not fulfill
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User with this ID already exists"
    404NotFound:
      description: ID not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Object not found with ID 1"
    500InternalServerError:
      description: Something went wrong serving this request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unable to reach user service: connection timeout"
