openapi: 3.0.0
info:
  version: 0.1.0
  title: Golang sample project
  description: The API for accessing the Golang sample project as generated by Temple
paths:
  /match/all:
    get:
      tags:
        - Match
      summary: Get a list of every match
      responses:
        200:
          description: Match list successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: integer
                    UserOne:
                      type: integer
                    UserTwo:
                      type: integer
                    MatchedOn:
                      type: string
        500:
          $ref: '#/components/responses/500ServerError'
  /match:
    post:
      tags:
        - Match
      summary: Register a new match
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserOne:
                  type: integer
                UserTwo:
                  type: integer
      responses:
        200:
          description: Match successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: integer
                  UserOne:
                    type: integer
                  UserTwo:
                    type: integer
                  MatchedOn:
                    type: string
        400:
          $ref: '#/components/responses/400RequestError'
        500:
          $ref: '#/components/responses/500ServerError'
  /match/{id}:
    get:
      tags:
        - Match
      summary: Look up a single match
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the match to get
      responses:
        200:
          description: Match details
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: integer
                  UserOne:
                    type: integer
                  UserTwo:
                    type: integer
                  MatchedOn:
                    type: string
        400:
          $ref: '#/components/responses/400RequestError'
        404:
          $ref: '#/components/responses/404NotFoundError'
        500:
          $ref: '#/components/responses/500ServerError'
    delete:
      tags:
        - Match
      summary: Delete a single match
      responses:
        200:
          description: Match details
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/400RequestError'
        404:
          $ref: '#/components/responses/404NotFoundError'
        500:
          $ref: '#/components/responses/500ServerError'
    put:
      tags:
        - Match
      summary: Update a single match
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserOne:
                  type: integer
                UserTwo:
                  type: integer
      responses:
        200:
          description: Match successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: integer
                  UserOne:
                    type: integer
                  UserTwo:
                    type: integer
                  MatchedOn:
                    type: string
        400:
          $ref: '#/components/responses/400RequestError'
        404:
          $ref: '#/components/responses/404NotFoundError'
        500:
          $ref: '#/components/responses/500ServerError'
  /user:
    post:
      tags:
        - User
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  minLength: 2
                  maxLength: 255
                  required: true
      responses:
        200:
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string 
                    format: uuid
                  Name:
                    type: string
        400:
          $ref: '#/components/responses/400RequestError'
        500:
          $ref: '#/components/responses/500ServerError'
  /user/{id}:
    get:
      tags:
        - User
      summary: Look up a single user
      parameters:
          - in: path
            name: id
            schema:
              type: integer
            required: true
            description: ID of the user to get
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string 
                    format: uuid
                  Name:
                    type: string
        400:
          $ref: '#/components/responses/400RequestError'
        404:
          $ref: '#/components/responses/404NotFoundError'
        500:
          $ref: '#/components/responses/500ServerError'
    delete:
      tags:
        - User
      summary: Delete a single user
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: '#/components/responses/400RequestError'
        404:
          $ref: '#/components/responses/404NotFoundError'
        500:
          $ref: '#/components/responses/500ServerError'
    put:
      tags:
        - User
      summary: Update a single user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  minLength: 2
                  maxLength: 255
                  required: true
      responses:
        200:
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: string
                    format: uuid
                  Name:
                    type: string
        400:
          $ref: '#/components/responses/400RequestError'
        404:
          $ref: '#/components/responses/404NotFoundError'
        500:
          $ref: '#/components/responses/500ServerError'
components:
  responses:
    500ServerError:
      description: Something went wrong serving this request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unable to reach user service: connection timeout"
    400RequestError:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request parameters: name"
    404NotFoundError:
      description: ID not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Object not found with ID 1"
